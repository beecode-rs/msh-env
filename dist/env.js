import { logger } from '#src/util/logger';
export class Env {
    names;
    _locationStrategies;
    _namingStrategies;
    constructor(params) {
        const { locationStrategies, namingStrategies, names } = params;
        this._locationStrategies = locationStrategies;
        this._namingStrategies = namingStrategies;
        this.names = [...names];
    }
    _envNames() {
        const { result } = this._namingStrategies.reduce((acc, ns) => {
            acc.lastResult = ns.names([...acc.lastResult]);
            acc.result.push(...acc.lastResult);
            return acc;
        }, { lastResult: [...this.names].reverse(), result: [...this.names].reverse() });
        const resultNames = [...result].reverse();
        logger().debug(`Try names in this order: [${resultNames.join(', ')}]`);
        return resultNames;
    }
    envValue() {
        return this._envNames().reduce((envResult, name) => {
            if (envResult) {
                return envResult;
            }
            return this._locationStrategies.reduce((locResult, ls) => {
                if (locResult) {
                    return locResult;
                }
                return ls.valueByName(name);
            }, undefined);
        }, undefined);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Vudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFekMsTUFBTSxPQUFPLEdBQUc7SUFDTixLQUFLLENBQVU7SUFDTCxtQkFBbUIsQ0FBb0I7SUFDdkMsaUJBQWlCLENBQWtCO0lBRXRELFlBQVksTUFBdUc7UUFDbEgsTUFBTSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUM5RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsa0JBQWtCLENBQUE7UUFDN0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFBO1FBQ3pDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLENBQUM7SUFFUyxTQUFTO1FBQ2xCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUMvQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNYLEdBQUcsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7WUFDOUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7WUFFbEMsT0FBTyxHQUFHLENBQUE7UUFDWCxDQUFDLEVBQ0QsRUFBRSxVQUFVLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUM1RSxDQUFBO1FBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFdEUsT0FBTyxXQUFXLENBQUE7SUFDbkIsQ0FBQztJQUVELFFBQVE7UUFDUCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQXFCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3RFLElBQUksU0FBUyxFQUFFLENBQUM7Z0JBQ2YsT0FBTyxTQUFTLENBQUE7WUFDakIsQ0FBQztZQUVELE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBcUIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUU7Z0JBQzVFLElBQUksU0FBUyxFQUFFLENBQUM7b0JBQ2YsT0FBTyxTQUFTLENBQUE7Z0JBQ2pCLENBQUM7Z0JBRUQsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzVCLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUNkLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNkLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICcjc3JjL2xvY2F0aW9uLXN0cmF0ZWd5J1xuaW1wb3J0IHsgTmFtaW5nU3RyYXRlZ3kgfSBmcm9tICcjc3JjL25hbWluZy1zdHJhdGVneSdcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJyNzcmMvdXRpbC9sb2dnZXInXG5cbmV4cG9ydCBjbGFzcyBFbnYge1xuXHRyZWFkb25seSBuYW1lczogc3RyaW5nW11cblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9sb2NhdGlvblN0cmF0ZWdpZXM6IExvY2F0aW9uU3RyYXRlZ3lbXVxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX25hbWluZ1N0cmF0ZWdpZXM6IE5hbWluZ1N0cmF0ZWd5W11cblxuXHRjb25zdHJ1Y3RvcihwYXJhbXM6IHsgbmFtZXM6IHN0cmluZ1tdOyBsb2NhdGlvblN0cmF0ZWdpZXM6IExvY2F0aW9uU3RyYXRlZ3lbXTsgbmFtaW5nU3RyYXRlZ2llczogTmFtaW5nU3RyYXRlZ3lbXSB9KSB7XG5cdFx0Y29uc3QgeyBsb2NhdGlvblN0cmF0ZWdpZXMsIG5hbWluZ1N0cmF0ZWdpZXMsIG5hbWVzIH0gPSBwYXJhbXNcblx0XHR0aGlzLl9sb2NhdGlvblN0cmF0ZWdpZXMgPSBsb2NhdGlvblN0cmF0ZWdpZXNcblx0XHR0aGlzLl9uYW1pbmdTdHJhdGVnaWVzID0gbmFtaW5nU3RyYXRlZ2llc1xuXHRcdHRoaXMubmFtZXMgPSBbLi4ubmFtZXNdXG5cdH1cblxuXHRwcm90ZWN0ZWQgX2Vudk5hbWVzKCk6IHN0cmluZ1tdIHtcblx0XHRjb25zdCB7IHJlc3VsdCB9ID0gdGhpcy5fbmFtaW5nU3RyYXRlZ2llcy5yZWR1Y2U8eyByZXN1bHQ6IHN0cmluZ1tdOyBsYXN0UmVzdWx0OiBzdHJpbmdbXSB9Pihcblx0XHRcdChhY2MsIG5zKSA9PiB7XG5cdFx0XHRcdGFjYy5sYXN0UmVzdWx0ID0gbnMubmFtZXMoWy4uLmFjYy5sYXN0UmVzdWx0XSlcblx0XHRcdFx0YWNjLnJlc3VsdC5wdXNoKC4uLmFjYy5sYXN0UmVzdWx0KVxuXG5cdFx0XHRcdHJldHVybiBhY2Ncblx0XHRcdH0sXG5cdFx0XHR7IGxhc3RSZXN1bHQ6IFsuLi50aGlzLm5hbWVzXS5yZXZlcnNlKCksIHJlc3VsdDogWy4uLnRoaXMubmFtZXNdLnJldmVyc2UoKSB9XG5cdFx0KVxuXG5cdFx0Y29uc3QgcmVzdWx0TmFtZXMgPSBbLi4ucmVzdWx0XS5yZXZlcnNlKClcblx0XHRsb2dnZXIoKS5kZWJ1ZyhgVHJ5IG5hbWVzIGluIHRoaXMgb3JkZXI6IFske3Jlc3VsdE5hbWVzLmpvaW4oJywgJyl9XWApXG5cblx0XHRyZXR1cm4gcmVzdWx0TmFtZXNcblx0fVxuXG5cdGVudlZhbHVlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG5cdFx0cmV0dXJuIHRoaXMuX2Vudk5hbWVzKCkucmVkdWNlPHN0cmluZyB8IHVuZGVmaW5lZD4oKGVudlJlc3VsdCwgbmFtZSkgPT4ge1xuXHRcdFx0aWYgKGVudlJlc3VsdCkge1xuXHRcdFx0XHRyZXR1cm4gZW52UmVzdWx0XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLl9sb2NhdGlvblN0cmF0ZWdpZXMucmVkdWNlPHN0cmluZyB8IHVuZGVmaW5lZD4oKGxvY1Jlc3VsdCwgbHMpID0+IHtcblx0XHRcdFx0aWYgKGxvY1Jlc3VsdCkge1xuXHRcdFx0XHRcdHJldHVybiBsb2NSZXN1bHRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBscy52YWx1ZUJ5TmFtZShuYW1lKVxuXHRcdFx0fSwgdW5kZWZpbmVkKVxuXHRcdH0sIHVuZGVmaW5lZClcblx0fVxufVxuIl19