import DeepEqual from 'fast-deep-equal/es6/index.js';
import { logger } from '#src/util/logger';
export class EnvType {
    _defaultValue = undefined;
    _convertStrategy;
    _env;
    _allowedValues = [];
    constructor(params) {
        const { convertStrategy, env } = params;
        this._convertStrategy = convertStrategy;
        this._env = env;
    }
    default(defaultValue) {
        this._loggerDebug('set default value', { defaultValue });
        this._defaultValue = defaultValue;
        return this;
    }
    get optional() {
        this._loggerDebug(`optional`);
        const strOrUndefined = this._env.envValue();
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        this._loggerDebug(`try to convert env string value "${strOrUndefined}"`);
        const convertedValue = this._convertStrategy.convert(strOrUndefined);
        if (convertedValue === undefined) {
            this._loggerDebug(`using default value "${String(this._defaultValue)}"`);
        }
        const optionalValue = convertedValue ?? this._defaultValue;
        this._validateAllowedValues(optionalValue);
        return optionalValue;
    }
    get required() {
        this._loggerDebug(`is required`);
        const envValue = this.optional;
        if (envValue === undefined) {
            throw this._createError('must have value defined');
        }
        return envValue;
    }
    allowed(...args) {
        this._loggerDebug(`set allowed values`, { allowedValues: args });
        this._allowedValues = [...args];
        return this;
    }
    _validateAllowedValues(value) {
        if (this._allowedValues.length === 0) {
            return;
        }
        this._loggerDebug('validating allowed values for:', { value });
        if (this._allowedValuesDoNotContain(value)) {
            throw this._createError(`must have one of the fallowing values: ${this._allowedValuesToString()}`);
        }
    }
    _allowedValuesDoNotContain(value) {
        const foundIndex = this._allowedValues.findIndex((v) => {
            return DeepEqual(value, v);
        });
        return foundIndex === -1;
    }
    _allowedValuesToString() {
        return this._allowedValues.map((v) => JSON.stringify(v)).join(', ');
    }
    _loggerDebug(msg, ...args) {
        logger().debug(`${this._envName} ${msg}`, ...args);
    }
    _createError(msg) {
        return new Error(`${this._envName} ${msg}`);
    }
    get _envName() {
        return `Env[${String(this._env.names.join(','))}]`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnYvdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSw4QkFBOEIsQ0FBQTtBQUlwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFekMsTUFBTSxPQUFPLE9BQU87SUFDVCxhQUFhLEdBQWtCLFNBQVMsQ0FBQTtJQUMvQixnQkFBZ0IsQ0FBb0I7SUFDcEMsSUFBSSxDQUFLO0lBQ2xCLGNBQWMsR0FBUSxFQUFFLENBQUE7SUFFbEMsWUFBWSxNQUF5RDtRQUNwRSxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUN2QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFBO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsWUFBZTtRQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQTtRQUN4RCxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQTtRQUVqQyxPQUFPLElBQUksQ0FBQTtJQUNaLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFFM0MsNEVBQTRFO1FBQzVFLElBQUksQ0FBQyxZQUFZLENBQUMsb0NBQW9DLGNBQWMsR0FBRyxDQUFDLENBQUE7UUFDeEUsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUVwRSxJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN6RSxDQUFDO1FBQ0QsTUFBTSxhQUFhLEdBQUcsY0FBYyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUE7UUFFMUQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRTFDLE9BQU8sYUFBYSxDQUFBO0lBQ3JCLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRWhDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUE7UUFDOUIsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDNUIsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFDbkQsQ0FBQztRQUVELE9BQU8sUUFBUSxDQUFBO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxJQUFTO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUNoRSxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUUvQixPQUFPLElBQUksQ0FBQTtJQUNaLENBQUM7SUFFUyxzQkFBc0IsQ0FBQyxLQUFTO1FBQ3pDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDdEMsT0FBTTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLGdDQUFnQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUU5RCxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzVDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQywwQ0FBMEMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ25HLENBQUM7SUFDRixDQUFDO0lBRVMsMEJBQTBCLENBQUMsS0FBUztRQUM3QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3RELE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMzQixDQUFDLENBQUMsQ0FBQTtRQUVGLE9BQU8sVUFBVSxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3pCLENBQUM7SUFFUyxzQkFBc0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNwRSxDQUFDO0lBRVMsWUFBWSxDQUFDLEdBQVcsRUFBRSxHQUFHLElBQStCO1FBQ3JFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0lBRVMsWUFBWSxDQUFDLEdBQVc7UUFDakMsT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsSUFBYyxRQUFRO1FBQ3JCLE9BQU8sT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQTtJQUNuRCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGVlcEVxdWFsIGZyb20gJ2Zhc3QtZGVlcC1lcXVhbC9lczYvaW5kZXguanMnXG5cbmltcG9ydCB7IHR5cGUgQ29udmVydFN0cmF0ZWd5IH0gZnJvbSAnI3NyYy9jb252ZXJ0LXN0cmF0ZWd5J1xuaW1wb3J0IHsgdHlwZSBFbnYgfSBmcm9tICcjc3JjL2VudidcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJyNzcmMvdXRpbC9sb2dnZXInXG5cbmV4cG9ydCBjbGFzcyBFbnZUeXBlPFQ+IHtcblx0cHJvdGVjdGVkIF9kZWZhdWx0VmFsdWU6IFQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9jb252ZXJ0U3RyYXRlZ3k6IENvbnZlcnRTdHJhdGVneTxUPlxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2VudjogRW52XG5cdHByb3RlY3RlZCBfYWxsb3dlZFZhbHVlczogVFtdID0gW11cblxuXHRjb25zdHJ1Y3RvcihwYXJhbXM6IHsgY29udmVydFN0cmF0ZWd5OiBDb252ZXJ0U3RyYXRlZ3k8VD47IGVudjogRW52IH0pIHtcblx0XHRjb25zdCB7IGNvbnZlcnRTdHJhdGVneSwgZW52IH0gPSBwYXJhbXNcblx0XHR0aGlzLl9jb252ZXJ0U3RyYXRlZ3kgPSBjb252ZXJ0U3RyYXRlZ3lcblx0XHR0aGlzLl9lbnYgPSBlbnZcblx0fVxuXG5cdGRlZmF1bHQoZGVmYXVsdFZhbHVlOiBUKTogdGhpcyB7XG5cdFx0dGhpcy5fbG9nZ2VyRGVidWcoJ3NldCBkZWZhdWx0IHZhbHVlJywgeyBkZWZhdWx0VmFsdWUgfSlcblx0XHR0aGlzLl9kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWVcblxuXHRcdHJldHVybiB0aGlzXG5cdH1cblxuXHRnZXQgb3B0aW9uYWwoKTogVCB8IHVuZGVmaW5lZCB7XG5cdFx0dGhpcy5fbG9nZ2VyRGVidWcoYG9wdGlvbmFsYClcblx0XHRjb25zdCBzdHJPclVuZGVmaW5lZCA9IHRoaXMuX2Vudi5lbnZWYWx1ZSgpXG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXRlbXBsYXRlLWV4cHJlc3Npb25zXG5cdFx0dGhpcy5fbG9nZ2VyRGVidWcoYHRyeSB0byBjb252ZXJ0IGVudiBzdHJpbmcgdmFsdWUgXCIke3N0ck9yVW5kZWZpbmVkfVwiYClcblx0XHRjb25zdCBjb252ZXJ0ZWRWYWx1ZSA9IHRoaXMuX2NvbnZlcnRTdHJhdGVneS5jb252ZXJ0KHN0ck9yVW5kZWZpbmVkKVxuXG5cdFx0aWYgKGNvbnZlcnRlZFZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuX2xvZ2dlckRlYnVnKGB1c2luZyBkZWZhdWx0IHZhbHVlIFwiJHtTdHJpbmcodGhpcy5fZGVmYXVsdFZhbHVlKX1cImApXG5cdFx0fVxuXHRcdGNvbnN0IG9wdGlvbmFsVmFsdWUgPSBjb252ZXJ0ZWRWYWx1ZSA/PyB0aGlzLl9kZWZhdWx0VmFsdWVcblxuXHRcdHRoaXMuX3ZhbGlkYXRlQWxsb3dlZFZhbHVlcyhvcHRpb25hbFZhbHVlKVxuXG5cdFx0cmV0dXJuIG9wdGlvbmFsVmFsdWVcblx0fVxuXG5cdGdldCByZXF1aXJlZCgpOiBUIHtcblx0XHR0aGlzLl9sb2dnZXJEZWJ1ZyhgaXMgcmVxdWlyZWRgKVxuXG5cdFx0Y29uc3QgZW52VmFsdWUgPSB0aGlzLm9wdGlvbmFsXG5cdFx0aWYgKGVudlZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IHRoaXMuX2NyZWF0ZUVycm9yKCdtdXN0IGhhdmUgdmFsdWUgZGVmaW5lZCcpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVudlZhbHVlXG5cdH1cblxuXHRhbGxvd2VkKC4uLmFyZ3M6IFRbXSk6IHRoaXMge1xuXHRcdHRoaXMuX2xvZ2dlckRlYnVnKGBzZXQgYWxsb3dlZCB2YWx1ZXNgLCB7IGFsbG93ZWRWYWx1ZXM6IGFyZ3MgfSlcblx0XHR0aGlzLl9hbGxvd2VkVmFsdWVzID0gWy4uLmFyZ3NdXG5cblx0XHRyZXR1cm4gdGhpc1xuXHR9XG5cblx0cHJvdGVjdGVkIF92YWxpZGF0ZUFsbG93ZWRWYWx1ZXModmFsdWU/OiBUKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuX2FsbG93ZWRWYWx1ZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdFx0dGhpcy5fbG9nZ2VyRGVidWcoJ3ZhbGlkYXRpbmcgYWxsb3dlZCB2YWx1ZXMgZm9yOicsIHsgdmFsdWUgfSlcblxuXHRcdGlmICh0aGlzLl9hbGxvd2VkVmFsdWVzRG9Ob3RDb250YWluKHZhbHVlKSkge1xuXHRcdFx0dGhyb3cgdGhpcy5fY3JlYXRlRXJyb3IoYG11c3QgaGF2ZSBvbmUgb2YgdGhlIGZhbGxvd2luZyB2YWx1ZXM6ICR7dGhpcy5fYWxsb3dlZFZhbHVlc1RvU3RyaW5nKCl9YClcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2FsbG93ZWRWYWx1ZXNEb05vdENvbnRhaW4odmFsdWU/OiBUKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgZm91bmRJbmRleCA9IHRoaXMuX2FsbG93ZWRWYWx1ZXMuZmluZEluZGV4KCh2KSA9PiB7XG5cdFx0XHRyZXR1cm4gRGVlcEVxdWFsKHZhbHVlLCB2KVxuXHRcdH0pXG5cblx0XHRyZXR1cm4gZm91bmRJbmRleCA9PT0gLTFcblx0fVxuXG5cdHByb3RlY3RlZCBfYWxsb3dlZFZhbHVlc1RvU3RyaW5nKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX2FsbG93ZWRWYWx1ZXMubWFwKCh2KSA9PiBKU09OLnN0cmluZ2lmeSh2KSkuam9pbignLCAnKVxuXHR9XG5cblx0cHJvdGVjdGVkIF9sb2dnZXJEZWJ1Zyhtc2c6IHN0cmluZywgLi4uYXJnczogUmVjb3JkPHN0cmluZywgdW5rbm93bj5bXSk6IHZvaWQge1xuXHRcdGxvZ2dlcigpLmRlYnVnKGAke3RoaXMuX2Vudk5hbWV9ICR7bXNnfWAsIC4uLmFyZ3MpXG5cdH1cblxuXHRwcm90ZWN0ZWQgX2NyZWF0ZUVycm9yKG1zZzogc3RyaW5nKTogRXJyb3Ige1xuXHRcdHJldHVybiBuZXcgRXJyb3IoYCR7dGhpcy5fZW52TmFtZX0gJHttc2d9YClcblx0fVxuXG5cdHByb3RlY3RlZCBnZXQgX2Vudk5hbWUoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gYEVudlske1N0cmluZyh0aGlzLl9lbnYubmFtZXMuam9pbignLCcpKX1dYFxuXHR9XG59XG4iXX0=