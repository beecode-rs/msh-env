import DeepEqual from 'fast-deep-equal/es6/index.js';
import { logger } from '#src/util/logger';
export class EnvType {
    _defaultValue = undefined;
    _convertStrategy;
    _env;
    _allowedValues = [];
    constructor(params) {
        const { convertStrategy, env } = params;
        this._convertStrategy = convertStrategy;
        this._env = env;
    }
    default(defaultValue) {
        this._loggerDebug('set default value', { defaultValue });
        this._defaultValue = defaultValue;
        return this;
    }
    get optional() {
        this._loggerDebug(`optional`);
        const strOrUndefined = this._env.envValue();
        this._loggerDebug(`try to convert env string value "${strOrUndefined}"`);
        const convertedValue = this._convertStrategy.convert(strOrUndefined);
        if (convertedValue === undefined) {
            this._loggerDebug(`using default value "${String(this._defaultValue)}"`);
        }
        const optionalValue = convertedValue ?? this._defaultValue;
        this._validateAllowedValues(optionalValue);
        return optionalValue;
    }
    get required() {
        this._loggerDebug(`is required`);
        const envValue = this.optional;
        if (envValue === undefined) {
            throw this._createError('must have value defined');
        }
        return envValue;
    }
    allowed(...args) {
        this._loggerDebug(`set allowed values`, { allowedValues: args });
        this._allowedValues = [...args];
        return this;
    }
    _validateAllowedValues(value) {
        if (this._allowedValues.length === 0) {
            return;
        }
        this._loggerDebug('validating allowed values for:', { value });
        if (this._allowedValuesDoNotContain(value)) {
            throw this._createError(`must have one of the fallowing values: ${this._allowedValuesToString()}`);
        }
    }
    _allowedValuesDoNotContain(value) {
        const foundIndex = this._allowedValues.findIndex((v) => {
            return DeepEqual(value, v);
        });
        return foundIndex === -1;
    }
    _allowedValuesToString() {
        return this._allowedValues.map((v) => JSON.stringify(v)).join(', ');
    }
    _loggerDebug(msg, ...args) {
        logger().debug(`${this._envName} ${msg}`, ...args);
    }
    _createError(msg) {
        return new Error(`${this._envName} ${msg}`);
    }
    get _envName() {
        return `Env[${this._env.names.join(',')}]`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnYvdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSw4QkFBOEIsQ0FBQTtBQUlwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFekMsTUFBTSxPQUFPLE9BQU87SUFDVCxhQUFhLEdBQWtCLFNBQVMsQ0FBQTtJQUMvQixnQkFBZ0IsQ0FBb0I7SUFDcEMsSUFBSSxDQUFLO0lBQ2xCLGNBQWMsR0FBUSxFQUFFLENBQUE7SUFFbEMsWUFBWSxNQUF5RDtRQUNwRSxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUN2QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFBO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsWUFBZTtRQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQTtRQUN4RCxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQTtRQUVqQyxPQUFPLElBQUksQ0FBQTtJQUNaLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFFM0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQ0FBb0MsY0FBYyxHQUFHLENBQUMsQ0FBQTtRQUN4RSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBRXBFLElBQUksY0FBYyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3pFLENBQUM7UUFDRCxNQUFNLGFBQWEsR0FBRyxjQUFjLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQTtRQUUxRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUE7UUFFMUMsT0FBTyxhQUFhLENBQUE7SUFDckIsQ0FBQztJQUVELElBQUksUUFBUTtRQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUE7UUFFaEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUM5QixJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUM1QixNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMseUJBQXlCLENBQUMsQ0FBQTtRQUNuRCxDQUFDO1FBRUQsT0FBTyxRQUFRLENBQUE7SUFDaEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHLElBQVM7UUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ2hFLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBRS9CLE9BQU8sSUFBSSxDQUFBO0lBQ1osQ0FBQztJQUVTLHNCQUFzQixDQUFDLEtBQVM7UUFDekMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN0QyxPQUFNO1FBQ1AsQ0FBQztRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsZ0NBQWdDLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRTlELElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDNUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLDBDQUEwQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDbkcsQ0FBQztJQUNGLENBQUM7SUFFUywwQkFBMEIsQ0FBQyxLQUFTO1FBQzdDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDdEQsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzNCLENBQUMsQ0FBQyxDQUFBO1FBRUYsT0FBTyxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDekIsQ0FBQztJQUVTLHNCQUFzQjtRQUMvQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3BFLENBQUM7SUFFUyxZQUFZLENBQUMsR0FBVyxFQUFFLEdBQUcsSUFBK0I7UUFDckUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFUyxZQUFZLENBQUMsR0FBVztRQUNqQyxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQzVDLENBQUM7SUFFRCxJQUFjLFFBQVE7UUFDckIsT0FBTyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFBO0lBQzNDLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEZWVwRXF1YWwgZnJvbSAnZmFzdC1kZWVwLWVxdWFsL2VzNi9pbmRleC5qcydcblxuaW1wb3J0IHsgdHlwZSBDb252ZXJ0U3RyYXRlZ3kgfSBmcm9tICcjc3JjL2NvbnZlcnQtc3RyYXRlZ3knXG5pbXBvcnQgeyB0eXBlIEVudiB9IGZyb20gJyNzcmMvZW52J1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnI3NyYy91dGlsL2xvZ2dlcidcblxuZXhwb3J0IGNsYXNzIEVudlR5cGU8VD4ge1xuXHRwcm90ZWN0ZWQgX2RlZmF1bHRWYWx1ZTogVCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2NvbnZlcnRTdHJhdGVneTogQ29udmVydFN0cmF0ZWd5PFQ+XG5cdHByb3RlY3RlZCByZWFkb25seSBfZW52OiBFbnZcblx0cHJvdGVjdGVkIF9hbGxvd2VkVmFsdWVzOiBUW10gPSBbXVxuXG5cdGNvbnN0cnVjdG9yKHBhcmFtczogeyBjb252ZXJ0U3RyYXRlZ3k6IENvbnZlcnRTdHJhdGVneTxUPjsgZW52OiBFbnYgfSkge1xuXHRcdGNvbnN0IHsgY29udmVydFN0cmF0ZWd5LCBlbnYgfSA9IHBhcmFtc1xuXHRcdHRoaXMuX2NvbnZlcnRTdHJhdGVneSA9IGNvbnZlcnRTdHJhdGVneVxuXHRcdHRoaXMuX2VudiA9IGVudlxuXHR9XG5cblx0ZGVmYXVsdChkZWZhdWx0VmFsdWU6IFQpOiB0aGlzIHtcblx0XHR0aGlzLl9sb2dnZXJEZWJ1Zygnc2V0IGRlZmF1bHQgdmFsdWUnLCB7IGRlZmF1bHRWYWx1ZSB9KVxuXHRcdHRoaXMuX2RlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZVxuXG5cdFx0cmV0dXJuIHRoaXNcblx0fVxuXG5cdGdldCBvcHRpb25hbCgpOiBUIHwgdW5kZWZpbmVkIHtcblx0XHR0aGlzLl9sb2dnZXJEZWJ1Zyhgb3B0aW9uYWxgKVxuXHRcdGNvbnN0IHN0ck9yVW5kZWZpbmVkID0gdGhpcy5fZW52LmVudlZhbHVlKClcblxuXHRcdHRoaXMuX2xvZ2dlckRlYnVnKGB0cnkgdG8gY29udmVydCBlbnYgc3RyaW5nIHZhbHVlIFwiJHtzdHJPclVuZGVmaW5lZH1cImApXG5cdFx0Y29uc3QgY29udmVydGVkVmFsdWUgPSB0aGlzLl9jb252ZXJ0U3RyYXRlZ3kuY29udmVydChzdHJPclVuZGVmaW5lZClcblxuXHRcdGlmIChjb252ZXJ0ZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLl9sb2dnZXJEZWJ1ZyhgdXNpbmcgZGVmYXVsdCB2YWx1ZSBcIiR7U3RyaW5nKHRoaXMuX2RlZmF1bHRWYWx1ZSl9XCJgKVxuXHRcdH1cblx0XHRjb25zdCBvcHRpb25hbFZhbHVlID0gY29udmVydGVkVmFsdWUgPz8gdGhpcy5fZGVmYXVsdFZhbHVlXG5cblx0XHR0aGlzLl92YWxpZGF0ZUFsbG93ZWRWYWx1ZXMob3B0aW9uYWxWYWx1ZSlcblxuXHRcdHJldHVybiBvcHRpb25hbFZhbHVlXG5cdH1cblxuXHRnZXQgcmVxdWlyZWQoKTogVCB7XG5cdFx0dGhpcy5fbG9nZ2VyRGVidWcoYGlzIHJlcXVpcmVkYClcblxuXHRcdGNvbnN0IGVudlZhbHVlID0gdGhpcy5vcHRpb25hbFxuXHRcdGlmIChlbnZWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyB0aGlzLl9jcmVhdGVFcnJvcignbXVzdCBoYXZlIHZhbHVlIGRlZmluZWQnKVxuXHRcdH1cblxuXHRcdHJldHVybiBlbnZWYWx1ZVxuXHR9XG5cblx0YWxsb3dlZCguLi5hcmdzOiBUW10pOiB0aGlzIHtcblx0XHR0aGlzLl9sb2dnZXJEZWJ1Zyhgc2V0IGFsbG93ZWQgdmFsdWVzYCwgeyBhbGxvd2VkVmFsdWVzOiBhcmdzIH0pXG5cdFx0dGhpcy5fYWxsb3dlZFZhbHVlcyA9IFsuLi5hcmdzXVxuXG5cdFx0cmV0dXJuIHRoaXNcblx0fVxuXG5cdHByb3RlY3RlZCBfdmFsaWRhdGVBbGxvd2VkVmFsdWVzKHZhbHVlPzogVCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLl9hbGxvd2VkVmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdHRoaXMuX2xvZ2dlckRlYnVnKCd2YWxpZGF0aW5nIGFsbG93ZWQgdmFsdWVzIGZvcjonLCB7IHZhbHVlIH0pXG5cblx0XHRpZiAodGhpcy5fYWxsb3dlZFZhbHVlc0RvTm90Q29udGFpbih2YWx1ZSkpIHtcblx0XHRcdHRocm93IHRoaXMuX2NyZWF0ZUVycm9yKGBtdXN0IGhhdmUgb25lIG9mIHRoZSBmYWxsb3dpbmcgdmFsdWVzOiAke3RoaXMuX2FsbG93ZWRWYWx1ZXNUb1N0cmluZygpfWApXG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9hbGxvd2VkVmFsdWVzRG9Ob3RDb250YWluKHZhbHVlPzogVCk6IGJvb2xlYW4ge1xuXHRcdGNvbnN0IGZvdW5kSW5kZXggPSB0aGlzLl9hbGxvd2VkVmFsdWVzLmZpbmRJbmRleCgodikgPT4ge1xuXHRcdFx0cmV0dXJuIERlZXBFcXVhbCh2YWx1ZSwgdilcblx0XHR9KVxuXG5cdFx0cmV0dXJuIGZvdW5kSW5kZXggPT09IC0xXG5cdH1cblxuXHRwcm90ZWN0ZWQgX2FsbG93ZWRWYWx1ZXNUb1N0cmluZygpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLl9hbGxvd2VkVmFsdWVzLm1hcCgodikgPT4gSlNPTi5zdHJpbmdpZnkodikpLmpvaW4oJywgJylcblx0fVxuXG5cdHByb3RlY3RlZCBfbG9nZ2VyRGVidWcobXNnOiBzdHJpbmcsIC4uLmFyZ3M6IFJlY29yZDxzdHJpbmcsIHVua25vd24+W10pOiB2b2lkIHtcblx0XHRsb2dnZXIoKS5kZWJ1ZyhgJHt0aGlzLl9lbnZOYW1lfSAke21zZ31gLCAuLi5hcmdzKVxuXHR9XG5cblx0cHJvdGVjdGVkIF9jcmVhdGVFcnJvcihtc2c6IHN0cmluZyk6IEVycm9yIHtcblx0XHRyZXR1cm4gbmV3IEVycm9yKGAke3RoaXMuX2Vudk5hbWV9ICR7bXNnfWApXG5cdH1cblxuXHRwcm90ZWN0ZWQgZ2V0IF9lbnZOYW1lKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGBFbnZbJHt0aGlzLl9lbnYubmFtZXMuam9pbignLCcpfV1gXG5cdH1cbn1cbiJdfQ==